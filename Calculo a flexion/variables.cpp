#include "variables.h"
#include "funciones.h"

#include <iostream>
#include <stdio.h>
#include <fstream>
#include <vector>
#include<Windows.h>
#include <math.h>

using namespace std;

//========================================= VARIABLES GLOBALES ========================================
//PARTE PRIMERA
vector<double> posicion_apoyos;
vector<double> distancia_vanos;
const double incremento = 0.001;
double luz = 0;
double numEcElast = 0;
double E = 1;
double I = 1;
double Q = 0;
double M = 0;
double momento_inicial = 0;
double momento_inicial_izquierda = 0;
double momento_inicial_derecha = 0;
short int contador = 0;

double Mmax_vol = 0;

double longitud_voladizo = 0;
double suma_reaccionA = 0;
double suma_reaccionB = 0;

double suma_reaccion_nudo_vol = 0;

vector <double> suma_DiagCortante(0);
vector <double> suma_Diagflectores(0);
vector <double> suma_DiagElastica(0);
vector<double> auxCortante(0);
vector<double> auxFlector(0);
vector<double> auxElastica(0);


//constructor
viga::viga() :
	_reaccionA(0.0),
	_reaccionB(0.0),
	_cortante(0.0),
	_momento_maximo(0.0),
	_flechaMaxima(0.0),
	_mf_x(0.0),
	_ecuacion_elastica(0.0),
	_DiagCortante (0),
	_Diagflectores(0),
	_DiagElastica (0),
	_CP(0.0),
	_CV(0.0),
	_giroA(0.0),
	_giroB(0.0),
	_suma_giroA(0.0),
	_suma_giroB(0.0)
{};

viga::~viga() { cout << "destructor" << endl; };

//PARTE SEGUNDA
string buscarPerfil = "", buscarValor = "";
int posicionfila = 0, posicioncolumna = 0;
int opc = 0, opc2 = 0;

//densidad del acero: 7850 kg/m3
int hay_voladizo = 0;
bool copia_de_datos = false;
bool rep = false;
char opcVigaSimetrica = 'n', vano = 'n';


//Funciones de impresion 
void   viga::get_solicitaciones() {
	cout << "\nCalculando esfuerzos...";
	cout << "\n\t[+] Reaccion A = " << suma_reaccionA << " KN" << endl;
	cout << "\t[+] Reaccion B = " << suma_reaccionB + suma_reaccion_nudo_vol << " KN" << endl;
	cout << "\t[+] Cortante para x(" << numEcElast << ") = " << _cortante << " KN" << endl;
	cout << "\t[+] Momento maximo= " << _momento_maximo << " m*KN" << endl;	cout << "\t[+] Momento flector para x(" << numEcElast << ") = " << _mf_x << " m*KN" << endl;
	cout << "\t[+] Valor para x(" << numEcElast << ") de la ecuacion de la elastica = " << _ecuacion_elastica << " *(E*I)*e-1 mm" << endl;
	cout << "\t[+] Flecha maxima= " << _flechaMaxima << " *(E*I)*e-1 mm" << endl;
}
void   viga::imprimir_momento_unico() {
	cout << "Introduce el valor del MOMENTO en KN*m: "; cin >> momento_inicial;
}
void   viga::imprimir_momentos() {
	cout << "Introduce el valor del MOMENTO de la IZQUIERDA en KN*m: "; cin >> momento_inicial_izquierda;
	cout << "Introduce el valor del MOMENTO de la DERECHA en KN*m: "; cin >> momento_inicial_derecha;
}
double viga::imprimir_CPCV() {
	//Mirar 1:32:00		D:\UNIVERSIDAD\Proyectos II\2021-09-13 15-43-08.mkv
	cout << "Introduce el valor de las CARGAS PERMANENTES en KN/m: "; cin >> _CP;
	//cout << "Introduce el valor de las CARGAS VARIABLES en KN/m: "; cin >> _CV;
	//_CP *= 1.35;
	//_CV *= 1.5;
	Q = _CP + _CV; //1.35 +1.5 son los coeficientes para mayorar las cargas en ELU en otros estados como ELS pueden no ser esos valores
	return Q;
}
double viga::imprimir_Cpuntual() {
	cout << "Introduce el valor de la CARGA puntual en KN: "; cin >> _CP;
	Q = _CP;
	return Q;
}
void	viga::imprimir_distancias(double& inicial, double& final) {
repetir_peticion:
	cout << "Digite la distancia de INICIO en \"X\" de la CARGA [m]: "; cin >> inicial;
	cout << "Digite la distancia FINAL de la CARGA REPARTIDA [m]: "; cin >> final;
	if (inicial > final) {
		cout << "\n\t[+] La distancia INICIAL debe ser menor a la FINAL\n" << endl;
		goto repetir_peticion;
	}
	else if (inicial < 0) {
		cout << "\n\t[+] La distancia INICIAL es menor a 0\n" << endl;
		goto repetir_peticion;
	}
	else if (final > luz) {
		cout << "\n\t[+] La distancia FINAL es mayor a la luz del vano\n" << endl;
		goto repetir_peticion;
	}
}

//Prontuarios
void viga::carga_puntual_generica(double a, double Q) {
	double  b, y;
	b = luz - a;
	_reaccionA = Q * b / luz;
	_reaccionB = Q * a / luz;

	for (unsigned int x = 0; x < (int)(1000 * luz + 1); x++) {
		y = x * incremento;
		if (y <= a) {
			_DiagCortante[x] += _reaccionA;
			_Diagflectores[x] += _reaccionA * y;
			_DiagElastica[x] += ((Q * luz * b * y) / (6 * E * I)) * (1 - (pow(b, 2) / pow(luz, 2)) - (pow(y, 2) / pow(luz, 2)));
		}
		else {
			_DiagCortante[x] += -_reaccionB;
			_Diagflectores[x] += _reaccionB * (luz - y);
			_DiagElastica[x] += (((Q * luz * a * (luz - y)) / (6 * E * I)) * (1 - (pow(a, 2) / pow(luz, 2)) - pow(((luz - y) / luz), 2)));
		}
	}
	_giroA = Q * a * b / 6 / E / I / luz * (luz + b);
	_giroB = -Q * a * b / 6 / E / I / luz * (luz + a);
}
void viga::continua_generica(short int tramo, double inicial, double final) {
	luz = distancia_vanos[tramo];
	_DiagCortante.resize((int)(luz * 1000  + (double)1));
	_Diagflectores.resize((int)(luz * 1000 + (double)1));
	_DiagElastica.resize((int)(luz * 1000  + (double)1));
	const double distCarga = final - inicial > luz ? luz : final - inicial;
	double distancia, carga;
	double incremento = (double)1/1000;
	// El num de rep. ha de ser igual que el incremento para que el tramo a calcular sea el correcto
	for (unsigned int i = 0; i < 1000; i++) {
		if (i == 0) { distancia = inicial; }
		else { distancia = inicial + distCarga * incremento;}
		inicial += distCarga * incremento;
		carga = Q;
		carga_puntual_generica(distancia, carga);
		if (i < 500) {
			this->_suma_giroA += _giroA + _giroB;
			this->_suma_giroB = -_suma_giroA;
		}
	}
	for (unsigned int x = 0; x < _DiagCortante.size(); x++) {
		_DiagCortante[x] *= distCarga * incremento;
		_Diagflectores[x] *= distCarga * incremento;
		_DiagElastica[x] *= distCarga * incremento;
	}
	this->_reaccionA = _DiagCortante[0];
	this->_reaccionB = abs(_DiagCortante.back());
	this->_momento_maximo = buscarMayor(_Diagflectores);
	this->_flechaMaxima = buscarMayor(_DiagElastica);

}
void viga::variable_generica(short int tramo, double Qi, double Qf, double inicial, double final) {
	_DiagCortante.resize((int)(luz * 1000 + (double)1));
	_Diagflectores.resize((int)(luz * 1000 + (double)1));
	_DiagElastica.resize((int)(luz * 1000 + (double)1));
	double co, cf;
	cout << "\n*****************Distancia en m ********************" << endl;
	cout << "\n*****************Cargas en KN ********************" << endl;
	cout << "Digite la carga INICIAL [KN]: "; cin >> co;
	cout << "Digite la carga FINAL [KN]: "; cin >> cf;

	const double distCarga = final - inicial;
	const double cargaIncremento = abs(cf - co);
	double distancia, carga;
	double incremento = 0.001;

	for (unsigned int i = 0; i < 1001; i++) {
		if (i == 0) {
			distancia = inicial;
			carga = co;
		}
		else { //Estos  bucles se encargan de aumentar proporcionalmente tanto la distancia como la carga
			distancia = inicial + distCarga * incremento;
			carga = co;
		}
		inicial += distCarga * incremento;
		// Dependiendo de si la carga variable es ascendente o descendente
		if (co < cf) { co += cargaIncremento * incremento; }
		else if (co > cf) { co -= cargaIncremento * incremento; }
		else{carga = cf;}
		carga_puntual_generica(distancia, carga);
		this->_suma_giroA += _giroA;
		this->_suma_giroB += _giroB;
	}
	for (unsigned int x = 0; x < _DiagCortante.size(); x++) {
		_DiagCortante[x] *=  distCarga * incremento;
		_Diagflectores[x] *= distCarga * incremento;
		_DiagElastica[x] *=  distCarga * incremento;
	}
	this->_reaccionA = _DiagCortante[0];
	this->_reaccionB = abs(_DiagCortante.back());
	this->_momento_maximo = buscarMayor(_Diagflectores);
	this->_flechaMaxima = buscarMayor(_DiagElastica);
}

//==========================================TABLA DE PERFILES==========================================


double caracMecanicasIPE[18][13] {
	//	"G",	"Iy",	"Wel.y",	"Wpl.y",	"iiy",	"Avz",	"Iz",	"Wel.z",	"Wpl.z",	"iiz",	"Ss",	"It",	"Iw" }; 
	{6,		80.1,	20,		23.2,	3.24,	3.58,	8.49,	3.69,	5.8,	1.05,	20.1,	0.7,	0.12},
	{8.1,	171,	34.2,	39.4,	4.07,	5.08,	15.9,	5.79,	9.2,	1.24,	23.7,	1.2,	0.35},
	{10.4,	318,	53,		60.7,	4.9,	6.31,	27.7,	8.65,	13.6,	1.45,	25.2,	1.74,	0.89},
	{12.9,	541,	77.3,	88.3,	5.74,	7.64,	44.9,	12.3,	19.3,	1.65,	26.7,	2.45,	1.98},
	{15.8,	869,	109,	124,	6.58,	9.66,	68.3,	16.7,	26.1,	1.84,	30.3,	3.6,	3.96},
	{18.8,	1317,	146,	166,	7.42,	11.3,	101,	22.2,	34.6,	2.05,	31.8,	4.79,	7.43},
	{22.4,	1943,	194,	221,	8.26,	14,		142,	28.5,	44.6,	2.24,	36.7,	6.98,	13},
	{26.2,	2772,	252,	285,	9.11,	15.9,	205,	37.3,	58.1,	2.48,	38.4,	9.07,	22.7},
	{30.7,	3892,	324,	367,	9.97,	19.1,	284,	47.3,	73.9,	2.69,	43.4,	12.9,	37.4},
	{36.1,	5790,	429,	484,	11.2,	22.1,	420,	62.2,	97,		3.02,	44.6,	15.9,	70.6},
	{42.2,	8356,	557,	628,	12.5,	25.7,	604,	80.5,	125,	3.35,	46.1,	20.1,	126},
	{49.1,	11770,	713,	804,	13.7,	30.8,	788,	98.5,	154,	3.55,	51.6,	28.2,	199},
	{57.1,	16270,	904,	1019,	15,		35.1,	1043,	123,	191,	3.79,	54.5,	37.3,	314},
	{66.3,	23130,	1160,	1307,	16.6,	42.7,	1318,	146,	229,	3.95,	60.2,	51.1,	490},
	{77.6,	33740,	1500,	1702,	18.5,	50.9,	1676,	176,	276,	4.12,	63.2,	66.9,	791},
	{90.7,	48200,	1930,	2194,	20.4,	59.9,	2142,	214,	336,	4.31,	66.8,	89.3,	1249},
	{106,	67120,	2440,	2787,	22.4,	72.3,	2668,	254,	401,	4.45,	73.6,	123,	1884},
	{122,	92080,	3070,	3512,	24.3,	83.8,	3387,	308,	486,	4.66,	78.1,	165,	2846}


};
double caracFisicasIPE[18][7] {
	//G		h		b		tw		tf		r	A
	{6,		80,		46,		3.8,	5.2,	5,	7.64},
	{8.1,	100,	55,		4.1,	5.7,	7,	10.3},
	{10.4,	120,	64,		4.4,	6.3,	7,	13.2},
	{12.9,	140,	73,		4.7,	6.9,	7,	16.4},
	{15.8,	160,	82,		5,		7.4,	9,	20.1},
	{18.8,	180,	91,		5.3,	8,		9,	23.9},
	{22.4,	200,	100,	5.6,	8.5,	12,	28.5},
	{26.2,	220,	110,	5.9,	9.2,	12,	33.4},
	{30.7,	240,	120,	6.2,	9.8,	15,	39.1},
	{36.1,	270,	135,	6.6,	10.2,	15,	45.9},
	{42.2,	300,	150,	7.1,	10.7,	15,	53.8},
	{49.1,	330,	160,	7.5,	11.5,	18,	62.6},
	{57.1,	360,	170,	8,		12.7,	18,	72.7},
	{66.3,	400,	180,	8.6,	13.5,	21,	84.5},
	{77.6,	450,	190,	9.4,	14.6,	21,	98.8},
	{90.7,	500,	200,	10.2,	16,		21,	116},
	{106,	550,	210,	11.1,	17.2,	24,	134},
	{122,	600,	220,	12,		19,		24,	156},

};
vector <string> IPE{ //16 tipos de IPE
"IPE 80 ",
"IPE 100",
"IPE 120",
"IPE 140",
"IPE 160",
"IPE 180",
"IPE 200",
"IPE 220",
"IPE 240",
"IPE 270",
"IPE 300",
"IPE 330",
"IPE 360",
"IPE 400",
"IPE 450",
"IPE 500",
"IPE 550",
"IPE 600",
};

double caracMecanicasIPN[21][13]{
	{5.94,	77.8,	19.5,	22.8,	3.2,	3.41,	6.29,	3,	5,	0.91,	21.6,	0.87,	0.09},
	{8.34,	171,	34.2,	39.8,	4.01,	4.85,	12.2,	4.88,	8.1,	1.07,	25,		1.6,	0.27},
	{11.1,	328,	54.7,	63.6,	4.81,	6.63,	21.5,	7.41,	12.4,	1.23,	28.4,	2.71,	0.69},
	{14.3,	573,	81.9,	95.4,	5.61,	8.65,	35.2,	10.7,	17.9,	1.4,	31.8,	4.32,	1.54},
	{17.9,	935,	117,	136,	6.4,	10.83,	54.7,	14.8,	24.9,	1.55,	35.2,	6.57,	3.14},
	{21.9,	1450,	161,	187,	7.2,	13.35,	81.3,	19.8,	33.2,	1.71,	38.6,	9.58,	5.92},
	{26.2,	2140,	214,	250,	8,		16.03,	117,	26,		43.5,	1.87,	42,		13.5,	10.5},
	{31.1,	3060,	278,	324,	8.8,	19.06,	162,	33.1,	55.7,	2.02,	45.4,	18.6,	17.8},
	{36.2,	4250,	354,	412,	9.59,	22.33,	221,	41.7,	70,		2.2,	48.9,	25,		28.7},
	{41.9,	5740,	442,	514,	10.4,	26.08,	288,	51,		85.9,	2.32,	52.6,	33.5,	44.1},
	{47.9,	7590,	542,	632,	11.1,	30.18,	364,	61.2,	103,	2.45,	56.4,	44.2,	64.6},
	{54.2,	9800,	653,	762,	11.9,	34.58,	451,	72.2,	121,	2.56,	60.1,	56.8,	91.8},
	{61,	12510,	782,	914,	12.7,	39.26,	555,	84.7,	143,	2.67,	63.9,	72.5,	129},
	{68,	15700,	923,	1080,	13.5,	44.27,	674,	98.4,	166,	2.8,	67.6,	90.4,	176},
	{76.1,	19610,	1090,	1276,	14.2,	49.95,	818,	114,	194,	2.9,	71.8,	115,	240},
	{84,	24010,	1260,	1482,	15,		55.55,	975,	131,	221,	3.02,	75.4,	141,	319},
	{92.4,	29210,	1460,	1714,	15.7,	61.69,	1160,	149,	253,	3.13,	79.3,	170,	420},
	{115,	45850,	2040,	2400,	17.7,	77.79,	1730,	203,	345,	3.43,	88.9,	267,	791},
	{141,	68740,	2750,	3240,	19.6,	95.6,	2480,	268,	456,	3.72,	98.5,	402,	1400},
	{166,	99180,	3610,	4240,	21.6,	111.3,	3490,	349,	592,	4.02,	107.3,	544,	2390},
	{199,	139000,	4630,	5452,	23.4,	138,	4670,	434,	752,	4.3,	117.6,	787,	3814}
};
double caracFisicasIPN[21][7]{
	{5.94,	80,		42,		3.9,	5.9,	3.9,	2.3},
	{8.34,	100,	50,		4.5,	6.8,	4.5,	2.7},
	{11.1,	120,	58,		5.1,	7.7,	5.1,	3.1},
	{14.3,	140,	66,		5.7,	8.6,	5.7,	3.4},
	{17.9,	160,	74,		6.3,	9.5,	6.3,	3.8},
	{21.9,	180,	82,		6.9,	10.4,	6.9,	4.1},
	{26.2,	200,	90,		7.5,	11.3,	7.5,	4.5},
	{31.1,	220,	98,		8.1,	12.2,	8.1,	4.9},
	{36.2,	240,	106,	8.7,	13.1,	8.7,	5.2},
	{41.9,	260,	113,	9.4,	14.1,	9.4,	5.6},
	{47.9,	280,	119,	10.1,	15.2,	10.1,	6.1},
	{54.2,	300,	125,	10.8,	16.2,	10.8,	6.5},
	{61,	320,	131,	11.5,	17.3,	11.5,	6.9},
	{68,	340,	137,	12.2,	18.3,	12.2,	7.3},
	{76.1,	360,	143,	13,		19.5,	13,		7.8},
	{84,	380,	149,	13.7,	20.5,	13.7,	8.2},
	{92.4,	400,	155,	14.4,	21.6,	14.4,	8.6},
	{115,	450,	170,	16.2,	24.3,	16.2,	9.7},
	{141,	500,	185,	18,		27,		18,		10.8},
	{166,	550,	200,	19,		30,		19,		11.9},
	{199,	600,	215,	21.6,	32.4,	21.6,	13}
};
vector <string> IPN{
	"IPN 80" ,
	"IPN 100" ,
	"IPN 120" ,
	"IPN 140" ,
	"IPN 160" ,
	"IPN 180" ,
	"IPN 200" ,
	"IPN 220" ,
	"IPN 240" ,
	"IPN 260" ,
	"IPN 280" ,
	"IPN 300" ,
	"IPN 320" ,
	"IPN 340" ,
	"IPN 360" ,
	"IPN 380" ,
	"IPN 400" ,
	"IPN 450" ,
	"IPN 500" ,
	"IPN 550" ,
	"IPN 600" ,
};

double caracMecanicasHE[38][13] {
{16.7,	349.2,	72.76,	83.01,	4.06,	7.56,	133.8,	26.76,	41.14,	2.51,	35.06,	5.24,	2.58},
{20.4,	449.5,	89.91,	104.2,	4.16,	9.04,	167.3,	33.45,	51.42,	2.53,	40.06,	9.25,	3.38},
{19.9,	606.2,	106.3,	119.5,	4.89,	8.46,	230.9,	38.48,	58.85,	3.02,	35.06,	5.99,	6.47},
{26.7,	864.4,	144.1,	165.2,	5.04,	10.96,	317.5,	52.92,	80.97,	3.06,	42.56,	13.84,	9.41},
{24.7,	1033,	155.4,	173.5,	5.73,	10.12,	389.3,	55.62,	84.85,	3.52,	36.56,	8.13,	15.06},
{33.7,	1509,	215.6,	245.4,	5.93,	13.08,	549.7,	78.52,	119.8,	3.58,	45.06,	20.06,	22.48},
{30.4,	1673,	220.1,	245.1,	6.57,	13.21,	615.6,	76.95,	117.6,	3.98,	41.57,	12.19,	31.41},
{42.6,	2492,	311.5,	354,	6.78,	17.59,	889.2,	111.2,	170,	4.05,	51.57,	31.24,	47.94},
{35.5,	2510,	293.6,	324.9,	7.45,	14.47,	924.6,	102.7,	156.5,	4.52,	42.57,	14.8,	60.21},
{51.2,	3831,	425.7,	481.4,	7.66,	20.24,	1363,	151.4,	231,	4.57,	54.07,	42.16,	93.75},
{42.3,	3692,	388.6,	429.5,	8.28,	18.08,	1336,	133.6,	203.8,	4.98,	47.59,	20.98,	108},
{61.3,	5696,	569.6,	642.5,	8.54,	24.83,	2003,	200.3,	305.8,	5.07,	60.09,	59.28,	171.1},
{50.5,	5410,	515.2,	568.5,	9.17,	20.67,	1955,	177.7,	270.6,	5.51,	50.09,	28.46,	193.3},
{71.5,	8091,	735.5,	827,	9.43,	27.92,	2843,	258.5,	393.9,	5.59,	62.59,	76.57,	295.4},
{60.3,	7763,	675.1,	744.6,	10.05,	25.18,	2769,	230.7,	351.7,	6,	56.1,	41.55,	328.5},
{83.2,	11260,	938.3,	1053,	10.31,	33.23,	3923,	326.9,	498.4,	6.08,	68.6,	102.7,	486.9},
{68.2,	10450,	836.4,	919.8,	10.97,	28.76,	3668,	282.1,	430.2,	6.5,	60.62,	52.37,	516.4},
{93,	14920,	1148,	1283,	11.22,	37.59,	5135,	395,	602.2,	6.58,	73.12,	123.8,	753.7},
{76.4,	13670,	1013,	1112,	11.86,	31.74,	4763,	340.2,	518.1,	7,	62.12,	62.1,	785.4},
{103,	19270,	1376,	1534,	12.11,	41.09,	6595,	471,	717.6,	7.09,	74.62,	143.7,	1130},
{88.3,	18260,	1260,	1383,	12.74,	37.28,	6310,	420.6,	641.2,	7.49,	68.13,	85.17,	1200},
{117,	25170,	1678,	1869,	12.99,	47.43,	8563,	570.9,	870.1,	7.58,	80.63,	185,	1688},
{97.6,	22930,	1479,	1628,	13.58,	41.13,	6985,	465.7,	709.7,	7.49,	71.63,	108,	1512},
{127,	30820,	1926,	2149,	13.82,	51.77,	9239,	615.9,	939.1,	7.57,	84.13,	225.1,	2069},
{105,	27690,	1678,	1850,	14.4,	44.95,	7436,	495.7,	755.9,	7.46,	74.13,	127.2,	1824},
{134,	36660,	2156,	2408,	14.65,	56.09,	9690,	646,	985.7,	7.53,	86.63,	257.2,	2454},
{112,	33090,	1891,	2088,	15.22,	48.96,	7887,	525.8,	802.3,	7.43,	76.63,	148.8,	2177},
{142,	43190,	2400,	2683,	15.46,	60.6,	10140,	676.1,	1032,	7.49,	89.13,	292.5,	2883},
{125,	45070,	2311,	2562,	16.84,	57.33,	8564,	570.9,	872.9,	7.34,	80.63,	189,	2942},
{155,	57680,	2884,	3232,	17.08,	69.98,	10820,	721.3,	1104,	7.4,	93.13,	355.7,	3817},
{140,	63720,	2896,	3216,	18.92,	65.78,	9465,	631,	965.5,	7.29,	85.13,	243.8,	4148},
{171,	79890,	3551,	3982,	19.14,	79.66,	11720,	781.4,	1198,	7.33,	97.63,	440.5,	5258},
{155,	86970,	3550,	3949,	20.98,	74.72,	10370,	691.1,	1059,	7.24,	89.63,	309.3,	5643},
{187,	107200,	4287,	4815,	21.19,	89.82,	12620,	841.6,	1292,	7.27,	102.1,	538.4,	7018},
{166,	111900,	4146,	4622,	22.99,	83.72,	10820,	721.3,	1107,	7.15,	92.13,	351.5,	7189},
{199,	136700,	4971,	5591,	23.2,	100.1,	13080,	871.8,	1341,	7.17,	104.6,	600.3,	8856},
{178,	141200,	4787,	5350,	24.97,	93.21,	11270,	751.4,	1156,	7.05,	94.63,	397.8,	8978},
{212,	171000,	5701,	6425,	25.17,	110.8,	13530,	902,	1391,	7.08,	107.1,	667.2,	10970},
};

double caracFisicasHE[38][7] {
{16.7,	96,		100,	5.0,	8,		12,	21.2},
{20.4,	100,	100,	6.0,	10,		12,	26},
{19.9,	114,	120,	5.0,	8,		12,	25.3},
{26.7,	120,	120,	6.5,	11,		12,	34},
{24.7,	133,	140,	5.5,	8.5,	12,	31.4},
{33.7,	140,	140,	7,		12,		12,	43},
{30.4,	152,	160,	6,		9,		15,	38.8},
{42.6,	160,	160,	8,		13,		15,	54.3},
{35.5,	171,	180,	6,		9.5,	15,	45.3},
{51.2,	180,	180,	8.5,	14,		15,	65.3},
{42.3,	190,	200,	6.5,	10,		18,	53.8},
{61.3,	200,	200,	9,		15,		18,	78.1},
{50.5,	210,	220,	7,		11,		18,	64.3},
{71.5,	220,	220,	9.5,	16,		18,	91},
{60.3,	230,	240,	7.5,	12,		21,	76.8},
{83.2,	240,	240,	10,		17,		21,	106},
{68.2,	250,	260,	7.5,	12.5,	24,	86.8},
{93,	260,	260,	10,		17.5,	24,	118.4},
{76.4,	270,	280,	8,		13,		24,	97.3},
{103,	280,	280,	10.5,	18,		24,	131.4},
{88.3,	290,	300,	8.5,	14,		27,	112.5},
{117,	300,	300,	11,		19,		27,	149.1},
{97.6,	310,	300,	9,		15.5,	27,	124.4},
{127,	320,	300,	11.5,	20.5,	27,	161.3},
{105,	330,	300,	9.5,	16.5,	27,	133.5},
{134,	340,	300,	12,		21.5,	27,	170.9},
{112,	350,	300,	10,		17.5,	27,	142.8},
{142,	360,	300,	12.5,	22.5,	27,	180.6},
{125,	390,	300,	11,		19,		27,	159},
{155,	400,	300,	13.5,	24,		27,	197.8},
{140,	440,	300,	11.5,	21,		27,	178},
{171,	450,	300,	14,		26,		27,	218},
{155,	490,	300,	12,		23,		27,	197.5},
{187,	500,	300,	14.5,	28,		27,	238.6},
{166,	540,	300,	12.5,	24,		27,	211.8},
{199,	550,	300,	15,		29,		27,	254.1},
{178,	590,	300,	13,		25,		27,	226.5},
{212,	600,	300,	15.5,	30,		27,	270},
};
vector <string> HE{
"HEA 100",
"HEB 100",
"HEA 120",
"HEB 120",
"HEA 140",
"HEB 140",
"HEA 160",
"HEB 160",
"HEA 180",
"HEB 180",
"HEA 200",
"HEB 200",
"HEA 220",
"HEB 220",
"HEA 240",
"HEB 240",
"HEA 260",
"HEB 260",
"HEA 280",
"HEB 280",
"HEA 300",
"HEB 300",
"HEA 320",
"HEB 320",
"HEA 340",
"HEB 340",
"HEA 360",
"HEB 360",
"HEA 400",
"HEB 400",
"HEA 450",
"HEB 450",
"HEA 500",
"HEB 500",
"HEA 550",
"HEB 550",
"HEA 600",
"HEB 600"
};

double caracMecanicasUPE[14][15] {
	{7.9,	107,	26.8,	31.2,	3.26,	4.05,	25.5,	8,		14.3,	1.59,	16.9,	1.47,	0.22,	1.82,	3.71},
	{9.82,	207,	41.4,	48,		4.07,	5.34,	38.3,	10.6,	19.3,	1.75,	17.9,	2.01,	0.53,	1.91,	3.93},
	{12.1,	364,	60.6,	70.3,	4.86,	7.18,	55.5,	13.8,	25.3,	1.9,	20,		2.9,	1.12,	1.98,	4.12},
	{14.5,	600,	85.6,	98.8,	5.71,	8.25,	78.8,	18.2,	33.2,	2.07,	21,		4.05,	2.2,	2.17,	4.54},
	{17,	911,	114,	132,	6.48,	10,		107,	22.6,	41.5,	2.22,	22,		5.2,	3.96,	2.27,	4.76},
	{19.7,	1350,	150,	173,	7.34,	11.2,	144,	28.6,	52.3,	2.39,	23,		6.99,	6.81,	2.47,	5.19},
	{22.8,	1910,	191,	220,	8.11,	13.5,	187,	34.5,	63.3,	2.54,	24.6,	8.89,	11,		2.56,	5.41},
	{26.6,	2680,	244,	281,	8.9,	15.8,	247,	42.5,	78.2,	2.7,	26.1,	12.1,	17.6,	2.7,	5.7},
	{30.2,	3600,	300,	347,	9.67,	18.8,	311,	50.1,	92.2,	2.84,	28.3,	15.1,	26.4,	2.79,	5.91},
	{35.2,	5250,	389,	451,	10.8,	22.2,	401,	60.7,	112,	2.99,	29.8,	19.9,	43.6,	2.89,	6.14},
	{44.4,	7820,	522,	613,	11.8,	30.3,	538,	75.6,	137,	3.08,	33.3,	31.5,	72.7,	2.89,	6.03},
	{53.2,	11010,	667,	792,	12.7,	38.8,	681,	89.7,	156,	3.17,	37.5,	45.2,	112,	2.9,	6},
	{61.2,	14830,	824,	982,	13.8,	45.6,	844,	105,	178,	3.29,	39.5,	58.5,	166,	2.97,	6.12},
	{72.2,	20980,	1050,	1260,	15.1,	56.2,	1045,	123,	191,	3.37,	42,		79.1,	259,	2.98,	6.06},
};
double caracFisicasUPE[14][7]  {
{7.9,	80,		50,		4,		7,		10,		10.1},
{9.82,	100,	55,		4.5,	7.5,	10,		12.5},
{12.1,	120,	60,		5,		8,		12,		15.4},
{14.5,	140,	65,		5,		9,		12,		18.4},
{17,	160,	70,		5.5,	9.5,	12,		21.7},
{19.7,	180,	75,		5.5,	10.5,	12,		25.1},
{22.8,	200,	80,		6,		11,		13,		29},
{26.6,	220,	85,		6.5,	12,		13,		33.9},
{30.2,	240,	90,		7,		12.5,	15,		38.5},
{35.2,	270,	95,		7.5,	13.5,	15,		44.8},
{44.4,	300,	100,	9.5,	15,		15,		56.6},
{53.2,	330,	105,	11,		16,		18,		67.8},
{61.2,	360,	110,	12,		17,		18,		77.9},
{72.2,	400,	115,	13.5,	18,		18,		91.9},

};
vector <string> UPE{
	"UPE 80" ,
	"UPE 100",
	"UPE 120",
	"UPE 140",
	"UPE 160",
	"UPE 180",
	"UPE 200",
	"UPE 220",
	"UPE 240",
	"UPE 270",
	"UPE 300",
	"UPE 330",
	"UPE 360",
	"UPE 400",
};

double caracMecanicasUPN[18][15] {
{5.59,	26.4,	10.6,	13.1,	1.92,	2.77,	9.12,	3.75,	6.78,	1.13,	16.7,	1.12,	0.03,	1.37,	2.47},
{7.09,	57.5,	17.7,	21.7,	2.52,	3.68,	14.1,	5.07,	9.38,	1.25,	18,		1.61,	0.08,	1.42,	2.6},
{8.64,	106,	26.5,	32.3,	3.1,	4.9,	19.4,	6.36,	11.9,	1.33,	19.4,	2.2,	0.18,	1.45,	2.67},
{10.6,	206,	41.2,	49,		3.91,	6.46,	29.3,	8.49,	16.2,	1.47,	20.3,	2.81,	0.41,	1.55,	2.93},
{13.4,	364,	60.7,	72.6,	4.62,	8.8,	43.2,	11.1,	21.2,	1.59,	22.2,	4.15,	0.9,	1.6,	3.03},
{16,	605,	86.4,	103,	5.45,	10.4,	62.7,	14.8,	28.3,	1.75,	23.9,	5.68,	1.8,	1.75,	3.37},
{18.8,	925,	116,	138,	6.21,	12.6,	85.3,	18.3,	35.2,	1.89,	25.3,	7.39,	3.26,	1.84,	3.56},
{22,	1350,	150,	179,	6.95,	15.1,	114,	22.4,	42.9,	2.02,	26.7,	9.55,	5.57,	1.92,	3.75},
{25.3,	1910,	191,	228,	7.7,	17.7,	148,	27,		51.8,	2.14,	28.1,	11.9,	9.07,	2.01,	3.94},
{29.4,	2690,	245,	292,	8.48,	20.6,	197,	33.6,	64.1,	2.3,	30.3,	16,		14.6,	2.14,	4.2},
{33.2,	3600,	300,	358,	9.22,	23.7,	248,	39.6,	75.7,	2.42,	31.7,	19.7,	22.1,	2.23,	4.39},
{37.9,	4820,	371,	442,	9.99,	27.1,	317,	47.7,	91.6,	2.56,	33.9,	25.5,	33.3,	2.36,	4.66},
{41.8,	6280,	448,	532,	10.9,	29.3,	399,	57.2,	109,	2.74,	35.6,	31,		48.5,	2.53,	5.02},
{46.2,	8030,	535,	632,	11.7,	31.8,	495,	67.8,	130,	2.9,	37.3,	37.4,	69.1,	2.7,	5.41},
{59.5,	10870,	679,	826,	12.1,	47.1,	597,	80.6,	152,	2.81,	43,		66.7,	96.1,	2.6,	4.82},
{60.6,	12840,	734,	918,	12.9,	50.8,	570,	75,		143,	2.72,	40.7,	61.2,	114,	2.4,	4.45},
{63.1,	15760,	829,	1010,	14,		53.2,	615,	78.7,	148,	2.77,	40.3,	59.1,	146,	2.38,	4.58},
{71.8,	20350,	1020,	1240,	14.9,	58.6,	846,	102,	190,	3.04,	44,		81.6,	221,	2.65,	5.11},

};
double caracFisicasUPN[18][8] {		//Esta tiene una columna mas porque tiene R1 y R2 no solo una R
{5.59,	50,		38,		5,		7,		7,		3.5,	7.12},
{7.09,	65,		42,		5.5,	7.5,	7.5,	4,		9.03},
{8.64,	80,		45,		6,		8,		8,		4,		11},
{10.6,	100,	50,		6,		8.5,	8.5,	4.5,	13.5},
{13.4,	120,	55,		7,		9,		9,		4.5,	17},
{16,	140,	60,		7,		10,		10,		5,		20.4},
{18.8,	160,	65,		7.5,	10.5,	10.5,	5.5,	24},
{22,	180,	70,		8,		11,		11,		5.5,	28},
{25.3,	200,	75,		8.5,	11.5,	11.5,	6,		32.2},
{29.4,	220,	80,		9,		12.5,	12.5,	6.5,	37.4},
{33.2,	240,	85,		9.5,	13,		13,		6.5,	42.3},
{37.9,	260,	90,		10,		14,		14,		7,		48.3},
{41.8,	280,	95,		10,		15,		15,		7.5,	53.3},
{46.2,	300,	100,	10,		16,		16,		8,		58.8},
{59.5,	320,	100,	14,		17.5,	17.5,	8.8,	75.8},
{60.6,	350,	100,	14,		16,		16,		8,		77.3},
{63.1,	380,	102,	13.5,	16,		16,		8,		80.4},
{71.8,	400,	110,	14,		18,		18,		9,		91.5},
};
vector <string> UPN{
	"UPN 80" ,
	"UPN 100",
	"UPN 120",
	"UPN 140",
	"UPN 160",
	"UPN 180",
	"UPN 200",
	"UPN 220",
	"UPN 240",
	"UPN 270",
	"UPN 300",
	"UPN 330",
	"UPN 360",
	"UPN 400",
};

//cuando sean  las propiedades de un perfil UPE deberemos agregar "ys" y "tym al final de esta" 
vector <string> propiedades{
	"G",	"Iy",	"Wel.y",	"Wpl.y",	"iiy",	"Avz",	"Iz",	"Wel.z",	"Wpl.z",	"iiz",	"Ss",	"It",	"Iw" };
